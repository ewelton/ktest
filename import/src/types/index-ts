import fs from 'fs-extra'
import slugify from 'slugify'
import path from 'path'
import uuid from 'uuid'
import { Context } from '../context'

// --------------------------------------------------------------------------
export interface ModelType {
	guid:string
	name:string

	depth:number
	parts:string[]

	parent?:ModelType
	description?:string

	twIcon?:string				// tiddlywiki icon
	faIcon?:string				// font awesome
}


export class BaseModelType implements ModelType {

	guid:string
	name:string

	depth:number
	parts:string[]

	parent?:ModelType
	description?:string

	twIcon?:string				// tiddlywiki icon
	faIcon?:string				// font awesome

	constructor(type:string,model:ModelModel) {
		super({},model)

		const p = type.split("/")
		this.depth = p.length
		this.parts =[]
		for(let idx in p)
			this.parts[idx]=model.slugify(p[idx].trim())
		this.name = this.parts[this.depth-1]
		this.twIcon = ''
		this.faIcon = ''
	}
}

export class BaseModelElementType extends BaseModelType implements ModelElementType {

	parent?:ModelElementType

	constructor(type:string,model:ModelModel) {
		super(type,model)
		if(this.depth>1) {
			const parentType = this.parts.slice(0,this.depth-1).join("/")
			this.parent = this.model.encounterElementType(parentType);
		}
	}
}
export class BaseModelConnectionType extends BaseModelType implements ModelConnectionType {

	parent?:ModelConnectionType

	constructor(type:string,model:ModelModel) {
		super(type,model)
		if(this.depth>1) {
			const parentType = this.parts.slice(0,this.depth-1).join("/")
			this.parent = this.model.encounterConnectionType(parentType);
		}
	}
}
